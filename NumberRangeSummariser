import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

//implementation that includes the provided interface, an object-oriented design, and a valid unit test:


interface NumberListFormatter {
    String format(List<Integer> numbers);
}

class SequentialNumberFormatter implements NumberListFormatter {
    @Override
    public String format(List<Integer> numbers) {
        List<NumberRange> ranges = new ArrayList<>();

        for (int i = 0; i < numbers.size(); i++) {
            int start = numbers.get(i);
            int end = start;

            while (i + 1 < numbers.size() && numbers.get(i + 1) - numbers.get(i) == 1) {
                end = numbers.get(i + 1);
                i++;
            }

            NumberRange range = new NumberRange(start, end);
            ranges.add(range);
        }

        return ranges.stream()
                .map(NumberRange::toString)
                .collect(Collectors.joining(", "));
    }
}

class NumberRange {
    private final int start;
    private final int end;

    public NumberRange(int start, int end) {
        this.start = start;
        this.end = end;
    }

    @Override
    public String toString() {
        if (start == end) {
            return String.valueOf(start);
        } else {
            return start + "-" + end;
        }
    }
}

public class Main {
    public static void main(String[] args) {
        List<Integer> numbers = List.of(1, 3, 6, 7, 8, 12, 13, 14, 15, 21, 22, 23, 24, 31);
        NumberListFormatter formatter = new SequentialNumberFormatter();
        String formattedList = formatter.format(numbers);
        System.out.println(formattedList); 
    }
}
